apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.lfh.utils"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "default"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles 'proguard-rules.pro'
        }
    }



    // 自定义apk输出路径和文件名，as3.0需要修改为一下写法
    applicationVariants.all { variant ->
        variant.outputs.all {

            if (!variant.buildType.isDebuggable()) {
                // 自定义输出路径
                variant.getPackageApplicationProvider().get().outputDirectory = new File("D:\\android\\apk\\供应商\\${variant.flavorName}")
                // 自定义文件名{示例：app-Flavor-debug-v1.0.0
                outputFileName = "supplier-${variant.buildType.name}-v${variant.versionCode}-v${variant.versionName}.apk"
            }
        }
    }

    productFlavors {
        dev {
            buildConfigField "String", "HTTP_HOST", rootProject.ext.debugurl["HTTP_HOST"]
            buildConfigField "String", "HTTP_H5_URL", rootProject.ext.debugurl["HTTP_H5_URL"]
        }

        online {
            buildConfigField "String", "HTTP_HOST", rootProject.ext.url["HTTP_HOST"]
            buildConfigField "String", "HTTP_H5_URL", rootProject.ext.url["HTTP_H5_URL"]
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies["appcompat"]
    implementation rootProject.ext.dependencies["constraintlayout"]
    implementation project(path: ':frame')
//    implementation 'com.github.lifuhai:Utils:1.2'
    implementation rootProject.ext.dependencies["recyclerview"]
    implementation rootProject.ext.dependencies["arouter-api"]
    implementation rootProject.ext.dependencies["ultimatebarx"]

    implementation rootProject.ext.dependencies["okhttp"]
    implementation rootProject.ext.dependencies["interceptor"]
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["gson"]
    implementation rootProject.ext.dependencies["rxjava_adapter"]
    implementation rootProject.ext.dependencies["rxjava"]
    implementation rootProject.ext.dependencies["rxandroid"]


    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    if (isNeedFirstModule.toBoolean()) {
        implementation project(path: ':First')
    }
    //异常恢复
    implementation 'com.zxy.android:recovery:1.0.0'


}
